
==================== FINAL INTERFACE ====================
2016-11-14 01:17:29.9192972 UTC

interface main@main:Main 8001
  interface hash: 4a9df65ff5a85109d5137bf91e9c8988
  ABI hash: f922171f24c553ee4dba44a62b4d94ba
  export-list hash: f498a33d2a1a73575e42f1a16fc34505
  orphan hash: 66375f5665ee0c69899b2cd69975ebc6
  flag hash: f3bbbc5e78867f30218d799337ba4550
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: DN-0.1.0.0@DN-0.1.0.0-8yMn8QkkcEWDg7GIz2sx1m
                      QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      Win32-2.3.1.1@Win32-2.3.1.1 array-0.5.1.1@array-0.5.1.1
                      base-4.9.0.0* containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  DN-0.1.0.0@DN-0.1.0.0-8yMn8QkkcEWDg7GIz2sx1m:Lib d93a1a3fafa35ac78c86630e2fb0d349
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck ec112fd729f2e762f9406bd01c0d8cc4
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Test af4abe94b092d359da3968f95afd5e43
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
64b93743d15772509664065042a53cc3
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Double]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Double
                     Test.QuickCheck.Arbitrary.$fArbitraryDouble)
                  Main.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink -}
ddd2ff36d6ca3f04d441543ce25a66c9
  $s$fArbitrary[]_$s$fArbitrary[]_$cshrink ::
    [GHC.Types.Double] -> [[GHC.Types.Double]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Types.Double]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Double
                   Test.QuickCheck.Arbitrary.$fArbitraryDouble_$cshrink
                   xs) -}
adf45be23fa8683582193dcd0c5f6045
  $s$fShow[] :: GHC.Show.Show [GHC.Types.Double]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Double]
                  Main.$s$fShow[]_$s$fShow[]_$cshowsPrec
                  Main.$s$fShow[]_$s$fShow[]_$cshow
                  Main.$s$fShow[]_$s$fShow[]_$cshowList -}
0700b637bf0a018cf272d0b884900748
  $s$fShow[]_$s$fShow[]_$cshow ::
    [GHC.Types.Double] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Double]) ->
                 GHC.Float.$fShowDouble_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f25b8cf990c854099350cc72f0b08352
  $s$fShow[]_$s$fShow[]_$cshowList ::
    [[GHC.Types.Double]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [[GHC.Types.Double]]) (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [GHC.Types.Double]
                   GHC.Float.$fShowDouble_$cshowList
                   eta
                   eta1) -}
9ad5e1d4276520eede8bf7ff2ab9754d
  $s$fShow[]_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [GHC.Types.Double] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int)
                   (eta :: [GHC.Types.Double])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Float.$fShowDouble_$cshowList eta eta1) -}
7e16d4763ee6dc921b446cd85cc663c5
  $s$fTestable(->) ::
    Test.QuickCheck.Property.Testable
      ([GHC.Types.Double] -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Double] -> GHC.Types.Bool)
                  (Test.QuickCheck.Property.$fTestable(->)_$cproperty
                     @ [GHC.Types.Double]
                     @ GHC.Types.Bool
                     Main.$s$fTestable(->)3
                     Main.$s$fTestable(->)2
                     Test.QuickCheck.Property.$fTestableBool)
                  Main.$s$fTestable(->)1 -}
82800c45c4061d729210fa43761f4c7f
  $s$fTestable(->)1 ::
    ([GHC.Types.Double] -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [GHC.Types.Double] -> GHC.Types.Bool) ->
                 GHC.Types.False) -}
4b3a2884895eb71bef6c8aef0f821dce
  $s$fTestable(->)2 :: GHC.Show.Show [GHC.Types.Double]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShow[] -}
627a2ce770f993dc498f0901db55f8cb
  $s$fTestable(->)3 ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Double]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fArbitrary[] -}
1d6fd661dbbe03b5c2b8b90e9e93c65f
  $s$fTestable(->)4 ::
    Test.QuickCheck.Property.Testable
      (GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool)
                  (Test.QuickCheck.Property.$fTestable(->)_$cproperty
                     @ GHC.Types.Int
                     @ ([GHC.Types.Double] -> GHC.Types.Bool)
                     Test.QuickCheck.Arbitrary.$fArbitraryInt
                     GHC.Show.$fShowInt
                     Main.$s$fTestable(->)6)
                  Main.$s$fTestable(->)5 -}
c1556ad199d577bbd67fd69e6279dade
  $s$fTestable(->)5 ::
    (GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool) ->
                 GHC.Types.False) -}
9085fa3a9e65c854a2e1592fe8a5e364
  $s$fTestable(->)6 ::
    Test.QuickCheck.Property.Testable
      ([GHC.Types.Double] -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fTestable(->) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d17d364741c1422856393a7932092b7f
  $wgo :: [GHC.Types.Double] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
4ab6c5f1e0bbf19b5a38acab6e86882b
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
6d0aaff01cb837c4b875da1f993bcbc2
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool)
                        Main.$s$fTestable(->)4
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
8318433c4effac6f67ae67e1a5db2c6b
  main2 :: GHC.Types.Int -> [GHC.Types.Double] -> GHC.Types.Bool
  {- Arity: 2,
     Unfolding: (\ (ds :: GHC.Types.Int) (ds1 :: [GHC.Types.Double]) ->
                 case ds1 of wild {
                   [] -> GHC.Types.True
                   : ipv ipv1
                   -> case Main.$wgo (Lib.topK ds wild) 0# of ww { DEFAULT ->
                      case ds of wild1 { GHC.Types.I# y ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww y) } } }) -}
168b01f66ebcb2ef45b023109fb59f06
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fArbitrary[] @ Double" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                     GHC.Types.Double)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Double
                                          $dArbitrary
  = Main.$s$fArbitrary[]
"SPEC/Main $fArbitrary[]_$cshrink @ Double" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                              GHC.Types.Double)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Double
                                                   $dArbitrary
  = Main.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink
"SPEC/Main $fShow[] @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           GHC.Types.Double)
  GHC.Show.$fShow[] @ GHC.Types.Double $dShow = Main.$s$fShow[]
"SPEC/Main $fShow[]_$cshow @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  GHC.Types.Double)
  GHC.Show.$fShow[]_$cshow @ GHC.Types.Double $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshow
"SPEC/Main $fShow[]_$cshowList @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                      GHC.Types.Double)
  GHC.Show.$fShow[]_$cshowList @ GHC.Types.Double $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshowList
"SPEC/Main $fShow[]_$cshowsPrec @ Double" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       GHC.Types.Double)
  GHC.Show.$fShow[]_$cshowsPrec @ GHC.Types.Double $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshowsPrec
"SPEC/Main $fTestable(->) @ Int @ ([Double] -> Bool)" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                        GHC.Types.Int)
                                                                      ($dShow :: GHC.Show.Show
                                                                                   GHC.Types.Int)
                                                                      ($dTestable :: Test.QuickCheck.Property.Testable
                                                                                       ([GHC.Types.Double]
                                                                                        -> GHC.Types.Bool))
  Test.QuickCheck.Property.$fTestable(->) @ GHC.Types.Int
                                          @ ([GHC.Types.Double] -> GHC.Types.Bool)
                                          $dArbitrary
                                          $dShow
                                          $dTestable
  = Main.$s$fTestable(->)4
"SPEC/Main $fTestable(->) @ [Double] @ Bool" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                               [GHC.Types.Double])
                                                             ($dShow :: GHC.Show.Show
                                                                          [GHC.Types.Double])
                                                             ($dTestable :: Test.QuickCheck.Property.Testable
                                                                              GHC.Types.Bool)
  Test.QuickCheck.Property.$fTestable(->) @ [GHC.Types.Double]
                                          @ GHC.Types.Bool
                                          $dArbitrary
                                          $dShow
                                          $dTestable
  = Main.$s$fTestable(->)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

